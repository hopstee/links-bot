import { Injectable } from "@nestjs/common"
import { Ctx, Message, Scene, SceneEnter, Wizard, WizardStep } from "nestjs-telegraf"
import { SceneContext, WizardContext } from "telegraf/typings/scenes"

import { LinkService } from "../../link/link.service";
import { isValidUrl } from "utils/url";
import { maskChars } from "utils/mask";

@Injectable()
@Wizard('addLinkScene')
export class AddLinkScene {
    constructor(private readonly linkService: LinkService) { }

    @WizardStep(1)
    async getLinkCode(
        @Ctx() ctx: WizardContext
    ) {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É:');
        ctx.wizard.next()
    }

    @WizardStep(2)
    async getLinkByCode(@Ctx() ctx: SceneContext, @Message() message: TelegramMessage) {
        try {
            if (!isValidUrl(message.text)) {
                ctx.replyWithMarkdownV2(`–í—ã –≤–≤–µ–ª–∏ –Ω–µ —Å—Å—ã–ª–∫—É ü§ì`)
                return
            }

            const code = crypto.randomUUID()

            const res = await this.linkService.createLink({
                link: maskChars(message.text),
                linkCode: code,
                userId: ctx.from.id
            })

            ctx.replyWithMarkdownV2(`–í–∞—à–∞ —Å—Å—ã–ª–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ ü´°\n–í–æ—Ç –µ–µ –∫–æ–¥: \`${code}\``)
        } catch (e) {
            ctx.replyWithMarkdownV2(`–•–º, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ ü§î –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫ ü§ì`)
        }

        ctx.scene.leave();
    }
}