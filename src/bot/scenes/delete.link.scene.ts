import { Injectable } from "@nestjs/common"
import { Ctx, Message, Scene, SceneEnter, Wizard, WizardStep } from "nestjs-telegraf"
import { SceneContext, WizardContext } from "telegraf/typings/scenes"

import { LinkService } from "../../link/link.service";

@Injectable()
@Wizard('deleteLinkScene')
export class DeleteLinkScene {
    constructor(private readonly linkService: LinkService) { }

    @WizardStep(1)
    async getLinkCode(
        @Ctx() ctx: WizardContext
    ) {
        ctx.reply('–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ —Å—Å—ã–ª–∫–∏:');
        ctx.wizard.next()
    }

    @WizardStep(2)
    async getLinkByCode(@Ctx() ctx: SceneContext, @Message() message: TelegramMessage) {
        try {
            const res = await this.linkService.deleteLink(message.text)
            
            if (res.affected) {
                ctx.replyWithMarkdownV2(`–°—Å—ã–ª–∫–∞ —É–¥–∞–ª–µ–Ω–∞\\. –î–∞–≤–∞–π —É–¥–∞–ª–∏–º –µ—â–µ —á—Ç–æ\\-–Ω–∏–±—É–¥—å üòà`)
            } else {
                ctx.replyWithMarkdownV2(`–°—Å—ã–ª–∫–∏ —Å —Ç–∞–∫–∏–º –∫–æ–¥–æ–º –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç ü§∑‚Äç‚ôÇÔ∏è`)
            }

        } catch (e) {
            ctx.replyWithMarkdownV2(`–•–º, —á—Ç–æ\\-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —Å—Å—ã–ª–∫–∏ ü§î –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑–æ–∫ ü§ì`)
        }

        ctx.scene.leave();
    }
}